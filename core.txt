-------------calc----------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace P3
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        float num, ans;
        int count;

        private void b1_Click(object sender, EventArgs e)
        {
            txtans.Text += 1; 
        }

        private void b2_Click(object sender, EventArgs e)
        {
            txtans.Text += 2;
        }

        private void b3_Click(object sender, EventArgs e)
        {
            txtans.Text += 3;
        }

        private void b4_Click(object sender, EventArgs e)
        {
            txtans.Text += 4;
        }

        private void b5_Click(object sender, EventArgs e)
        {
            txtans.Text += 5;
        }

        private void b6_Click(object sender, EventArgs e)
        {
            txtans.Text += 6;
        }

        private void b7_Click(object sender, EventArgs e)
        {
            txtans.Text += 7;
        }

        private void b8_Click(object sender, EventArgs e)
        {
            txtans.Text += 8;
        }

        private void b9_Click(object sender, EventArgs e)
        {
            txtans.Text += 9;
        }

        private void b0_Click(object sender, EventArgs e)
        {
            txtans.Text += 0;
        }

        private void div_Click(object sender, EventArgs e)
        {
            num = float.Parse(txtans.Text);
            txtans.Clear();
            txtans.Focus();
            count = 4;
            label1.Text = num.ToString() + "/";
        }

        private void point_Click(object sender, EventArgs e)
        {
            txtans.Text = txtans.Text + ".";
        }

        private void backspace_Click(object sender, EventArgs e)
        {
            int length = txtans.TextLength - 1;
            string text = txtans.Text;
            txtans.Clear();
            for (int i = 0; i < length; i++)
            {
                txtans.Text = txtans.Text + text[i];
            }
        }

        private void clear_Click(object sender, EventArgs e)
        {
            txtans.Text = "";
        }

        private void result_Click(object sender, EventArgs e)
        {
            compute();
            label1.Text = "";
        }

        private void mul_Click(object sender, EventArgs e)
        {
            num = float.Parse(txtans.Text);
            txtans.Clear();
            txtans.Focus();
            count = 3;
            label1.Text = num.ToString() + "*";
        }

        private void sub_Click(object sender, EventArgs e)
        {
            num = float.Parse(txtans.Text);
            txtans.Clear();
            txtans.Focus();
            count = 2;
            label1.Text = num.ToString() + "-";
        }

        private void add_Click(object sender, EventArgs e)
        {
            num = float.Parse(txtans.Text);
            txtans.Clear();
            txtans.Focus();
            count = 1;
            label1.Text = num.ToString() + "+";
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        public void compute()
        {
            switch (count)
            {
                case 1:

                    ans = num + float.Parse(txtans.Text);
                    txtans.Text = ans.ToString();
                    break;
                case 2:
                    ans = num - float.Parse(txtans.Text);
                    txtans.Text = ans.ToString();
                    break;
                case 3:
                    ans = num * float.Parse(txtans.Text);
                    txtans.Text = ans.ToString();
                    break;
                case 4:
                    ans = num / float.Parse(txtans.Text);
                    txtans.Text = ans.ToString();
                    break;
                default:
                    break;


            }
        }
    }
}
-------------------------tic-tac-toe-------------------
using System;
using System.Drawing;
using System.Windows.Forms;

namespace P4
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        Button[,] btn;
        int n,count=0;
        String turn = "X";

        private void Form1_Load(object sender, EventArgs e)
        {
            lblturn.Visible = false;
            lblplayerTag.Visible = false;
            resetToolStripMenuItem.Enabled = false; 
        }

        public void CreateBoard() {
            Int32 top = 50, left = 50;
            n = 3;
            btn = new Button[n, n];

            lblturn.Visible = true;
            lblplayerTag.Visible = true;
            lblturn.Text = txtp1.Text;
            resetToolStripMenuItem.Enabled = true;

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Button temp = new Button();
                    temp.Text = "";
                    temp.Name = "btn" + Convert.ToString(i) + Convert.ToString(j);
                    temp.Size = new Size(50, 50);
                    temp.Location = new Point(left, top);
                    temp.Click += Temp_Click;
                    left += 60;
                    btn[i, j] = temp;

                    this.Controls.Add(btn[i, j]);
                }

                left = 50;
                top += 60;
            }
        }

        private void Temp_Click(object sender, EventArgs e)
        {
            Button temp = (Button)sender;
            bool result;

            if (temp.Text == "") {
                temp.Text = turn;
                count += 1;
                result = winner_check();
                if (result) {
                    MessageBox.Show("Wohh!!! \n Winner is :  " + lblturn.Text);
                    resetBoard();
                    return;
                }
                turn = (turn.Equals("X")) ? "0" : "X";
                lblturn.Text = (lblturn.Text.ToString().Equals(txtp1.Text.ToString()))? txtp2.Text : txtp1.Text;

                if (count == n*n) {
                    MessageBox.Show("Match is Draw !!!");
                    resetBoard();
                }
            }

        }

        public void resetBoard()
        {
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    btn[i, j].Text = "";
                }
            }
            count = 0;
            lblturn.Text = txtp1.Text;
            turn = "X";
        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            if (txtp1.Text.ToString() == "" || txtp2.Text.ToString() == "")
            {
                MessageBox.Show("Enter Player Names !!!");
            }
            else {
                PanelWelcome.Visible = false;
                CreateBoard();
            }
        }

        public void RemoveBtn() {
            resetBoard();
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    this.Controls.Remove(btn[i, j]);
                }
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void startToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RemoveBtn();
            lblturn.Visible = false;
            lblplayerTag.Visible = false;
            resetToolStripMenuItem.Enabled = false;
            PanelWelcome.Visible = true;
        }

        private void resetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            resetBoard();
        }

        public bool winner_check()
        {
            bool ans = false;
            for (int i = 0; i < n; i++)
            {
                ans = true;
                for (int j = 1; j < n; j++)
                {
                    if (btn[i, 0].Text.ToString().Equals(btn[i, j].Text.ToString()) && !btn[i, j].Text.ToString().Equals(""))
                    {
                        continue;
                    }
                    else
                    {
                        ans = false;
                    }
                }
                if (ans == true)
                {
                    return ans;
                }

            }

            // for column check
            for (int i = 0; i < n; i++)
            {
                ans = true;
                for (int j = 1; j < n; j++)
                {
                    if ((Equals(btn[0, i].Text.ToString(), btn[j, i].Text.ToString()) == true) && (btn[j,i].Text != ""))
                    {
                        continue;
                    }
                    else
                    {
                        ans = false;
                    }
                }
                if (ans == true)
                {
                    return ans;
                }

            }

            // for first Diagonal check
            ans = true;
            for (int i = 1; i < n; i++)
            {
                if (btn[0, 0].Text.ToString().Equals(btn[i, i].Text) && !btn[i,i].Text.ToString().Equals("") )
                {
                    continue;
                }
                else {
                    ans = false;
                }              
            }
            if (ans == true)
            {
                return ans;
            }

            // for second Diagonal check
            ans = true;
            for (int i = 1; i < n; i++)
            {
                int cnt = n - i - 1;
                if (btn[0, n-1].Text.ToString().Equals(btn[i, cnt].Text) && !btn[i, cnt].Text.ToString().Equals(""))
                {
                    continue;
                }
                else
                {
                    ans = false;
                }
            }
            if (ans == true)
            {
                return ans;
            }

            return ans;
        }
    }
}
---------------------------box puzzle-----------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace P5
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        int n = 0,boardsize;

        Button[] btn;
        Button first, second;
        int clickFlag = 0;

        private void btnStart_Click(object sender, EventArgs e)
        {
            if (cbBoardSIze.SelectedItem == null)
            {
                MessageBox.Show("Please Select Puzzle Size !");
            }
            else
            {
                boardsize = Convert.ToInt32(cbBoardSIze.SelectedItem);
                boardsize *= boardsize; 
                pw.Visible = false;
                createBoard();
            }
        }

        private void OnClickBtn(object sender, EventArgs e)
        {
            Button b = (Button)sender;
            switch (clickFlag) {
                case 0 :
                    first = b;
                    
                    clickFlag += 1;
                    break;
                case 1 :
                    second = b;
                    if (second.Text.ToString().Equals(""))
                    {
                        swap(first, second); 
                    }
                    else if (first.Text.ToString().Equals(""))
                    {
                        swap(second, first);
                    }
                    clickFlag = 0;
                    first = null;
                    second = null;
                    break;
            }
        }
        public void swap(Button f ,Button s) {
      
            s.Text = f.Text;
            f.Text = "";
        }

        public void createBoard() {
            n = Convert.ToInt32(cbBoardSIze.SelectedItem);
            btn = new Button[n * n];
            int left = 50, top = 50;

            int temp = 0;

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Button b = new Button();
   
                    b.Height = 50;
                    b.Width = 50;
                    b.Left = left;
                    b.Top = top;
                    b.BackColor = Color.White;
                    b.Visible = true;
                    b.TabStop = false;

                    b.Click += OnClickBtn;
                    b.DragEnter += btnSelectStag;
                    b.DragLeave += btnDropStag;
                    b.Name = (temp == 0) ? "" : temp.ToString();
                    b.Text = b.Name;
                    
                    btn[temp] = b;
                    //temp++;

                    left += 55;
                    this.Controls.Add(btn[temp]);

                    temp += 1;
   
                }

                top += 55;
                left = 50;
            }
            suffle();
        }

        private void btnDropStag(object sender, EventArgs e)
        {
            Button b = (Button)sender;
            MessageBox.Show("Drop btn"+b.Text);
        }

        private void btnSelectStag(object sender, DragEventArgs e)
        {
            Button b = (Button)sender;
            MessageBox.Show("Select btn" + b.Text);
        }

        public void suffle() {
            int[] bnum = new int[boardsize];
            int i, j, rowChecker;
            bool flag = false;
            i = 1;

            do
            {
                Random rnd = new Random();
                rowChecker = Convert.ToInt32(rnd.Next(0, boardsize - 1) + 1);

                for (j = 1; j <= i; j++)
                {
                    if (bnum[j] == rowChecker)
                    {
                        flag = true;
                        break;
                    }
                }
                if (flag == true)
                {
                    flag = false;
                }
                else
                {
                    bnum[i] = rowChecker;
                    i += 1;
                }
            } while (i <= boardsize - 1);

            for (i = 0; i < boardsize; i++) {
                if (bnum[i] == 0)
                {
                    btn[i].Text = "";
                }
                else {
                    btn[i].Text = Convert.ToString(bnum[i]);
                }
                
            }
           // MessageBox.Show("Shuffled");
        }
    }
}
---------------------------Circular matrix---------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace P6
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        Int32 m, n;
        Int32[,] matrix;

        private void btnGenrate_Click(object sender, EventArgs e)
        {
            try
            {
                m = Convert.ToInt32(txtm.Text);
                n = Convert.ToInt32(txtn.Text);

                matrix = new Int32[m, n];
                GenerateMatrix();
                PrintMatrix();
            }
            catch (Exception ex)
            {
                lblMatrixVal.Text = "Enter Valid Numbers in M and N ";
            }

        }
        public void PrintMatrix()
        {
            lblMatrixVal.Text = "";
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    lblMatrixVal.Text += " "+Convert.ToString(matrix[i, j]) + " ";
                }
                lblMatrixVal.Text += "\n";
            }
        }

        public void GenerateMatrix()
        {
            int val = 1;
            int r = m, c = n;

            int k = 0, l = 0;
            while (k < r && l < c)
            {

                for (int i = l; i < c; ++i)
                {
                    matrix[k, i] = val;
                    val += 1;
                }

                k++;
                for (int i = k; i < r; ++i)
                {
                    matrix[i, c - 1] = val;
                    val += 1;
                }
                c--;

                if (k < r)
                {
                    for (int i = c - 1; i >= l; --i)
                    {
                        matrix[r - 1, i] = val;
                        val += 1;
                    }
                    r--;
                }

                if (l < c)
                {
                    for (int i = r - 1; i >= k; --i)
                    {
                        matrix[i, l] = val;
                        val += 1;
                    }
                    l++;
                }

            }
        }
    }
}

